package kr.co.thinkup.exsample.SocketSingletone.network.struct;import kr.co.thinkup.exsample.SocketSingletone.network.Message;import kr.co.thinkup.exsample.util.ByteUtils;/** * 22/04/2019 by yh.Choi */public class PSensorInfo {    private int         MAX_SENSOR_LIST_COUNT = 16;    private int         size;       // 4 byte    private int         message;    // 2 byte    private int         scanDataCount;  // 1 byte    private PSensorData [] sensorData;  // 8 byte * array 16 = 182    public PSensorInfo() {        size = 189;        message = Message.PK_MSG_NONE;        scanDataCount = 0;        sensorData = new PSensorData[MAX_SENSOR_LIST_COUNT];    }    public int getMaxSensorCount() {        return this.MAX_SENSOR_LIST_COUNT;    }    public int getSize() {        return size;    }    public void setSize(int size) {        this.size = size;    }    public int getMessage() {        return message;    }    public void setMessage(int message) {        this.message = message;    }    public int getScanDataCount() {        return scanDataCount;    }    public void setScanDataCount(int scanDataCount) {        this.scanDataCount = scanDataCount;    }    public PSensorData[] getSensorData() {        return sensorData;    }    public PSensorData getSensorData(int idx) {        return sensorData[idx];    }    public void setSensorData(PSensorData[] sensorData) {        this.sensorData = sensorData;    }    public void setSensorData(int idx, PSensorData sensorData) {        this.sensorData[idx] = sensorData;    }    public String toString() {        return ByteUtils.byteArrayToHex(toBytes());    }    public byte[] toBytes() {        byte [] bSize = ByteUtils.intToByteArray(getSize(), 4);//        bSize = ByteUtils.toBytes(getSize());        byte [] bMessage = ByteUtils.intToByteArray(getMessage(), 2);        byte [] bScanDataCount = new byte[1];        bScanDataCount[0] = (byte) getScanDataCount();        byte [] sensorData = new byte[128];        byte [] temp;        for (int i = 0; i < MAX_SENSOR_LIST_COUNT; i++) {            temp = getSensorData(i).toBytes();            System.arraycopy(temp, 0, sensorData, i*8, 8);        }        return ByteUtils.concat(bSize, bMessage, bScanDataCount, sensorData);    }}